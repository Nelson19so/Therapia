import { useState } from "react";
import clsx from "clsx";

export default function FormInput({ type, placeholder, name = "", autoComplete = "on", formData, setFormData, inputError }) {
  const [showPassword, setShowPassword] = useState(false);
  const [focus, setFocus] = useState(false);
  let formDataName;

  switch(placeholder) {
    case "First Name":
      formDataName = "first_name"
      break;
    case "Last Name":
      formDataName = "last_name"
      break;
    case "Email":
      formDataName = "email"
      break;
    case "Password":
      formDataName = "password"
      break;
    case "Confirm Password":
      formDataName = "confirm_password"
  }

  function handleChange(e) {
    setFormData({...formData, [formDataName]: e.target.value})
  }
  
  return (
    <div>
      <div
      className={clsx(
        "flex items-center justify-between gap-x-[19px] outline-[2px] px-[19px] py-[10px] rounded-[10px]",
        { "outline-[var(--primary)]": !focus },
        { "outline-[#4285F4]": focus }
      )}
    >
      <input
        type={type === "password" ? (showPassword ? "text" : "password") : type}
        placeholder={placeholder}
        name={name}
        className="sm:text-[17px]/[35px] text-[14px]/[35px] text-[var(--text-dark)] placeholder-[#8C8686] font-medium w-full outline-0"
        onFocus={() => setFocus(true)}
        onBlur={() => setFocus(false)}
        autoComplete={autoComplete}
        value={formData[formDataName]}
        onChange={handleChange}
      />
      {type === "password" ? (
        <svg
          width={24}
          height={25}
          viewBox="0 0 24 25"
          fill="none"
          xmlns="http://www.w3.org/2000/svg"
          onClick={() => setShowPassword(!showPassword)}
          className="cursor-pointer"
        >
          <path
            d="M4.91623 3.87502C4.81326 3.77944 4.67824 3.72585 4.53775 3.72481C4.39725 3.72376 4.26145 3.77534 4.15707 3.86938C4.05268 3.96342 3.98727 4.09312 3.9737 4.23296C3.96013 4.3728 3.99938 4.51266 4.08374 4.62502L6.04124 6.78127C2.54624 8.83439 1.05092 12.125 0.986235 12.2722C0.954184 12.3442 0.937622 12.4221 0.937622 12.501C0.937622 12.5798 0.954184 12.6577 0.986235 12.7297C1.01811 12.8019 1.79811 14.5316 3.53998 16.2735C5.15623 17.8878 7.93311 19.8125 12 19.8125C13.6999 19.8229 15.3816 19.463 16.9284 18.7578L19.0847 21.1288C19.1851 21.2392 19.3253 21.3051 19.4744 21.3122C19.6235 21.3192 19.7693 21.2667 19.8797 21.1663C19.9901 21.0658 20.056 20.9256 20.0631 20.7765C20.0701 20.6274 20.0176 20.4817 19.9172 20.3713L4.91623 3.87502ZM9.47436 10.5613L13.6931 15.2038C13.0597 15.5995 12.3075 15.7603 11.5676 15.6581C10.8278 15.5558 10.1473 15.197 9.64502 14.6443C9.14273 14.0915 8.85048 13.3799 8.81929 12.6337C8.7881 11.8875 9.01995 11.154 9.47436 10.5613ZM12 18.6875C9.05811 18.6875 6.48936 17.6169 4.36405 15.5066C3.47294 14.6213 2.719 13.608 2.12717 12.5C2.52936 11.7313 4.01155 9.20189 6.81467 7.63345L8.70842 9.71564C8.03419 10.5146 7.67313 11.5313 7.69242 12.5765C7.71171 13.6218 8.11004 14.6244 8.8133 15.398C9.51656 16.1715 10.4769 16.6632 11.5156 16.7817C12.5543 16.9001 13.6006 16.6372 14.46 16.0419L16.1297 17.8794C14.8206 18.421 13.4166 18.6957 12 18.6875ZM12.6 9.36877C12.4534 9.34079 12.324 9.25574 12.2401 9.13232C12.1562 9.0089 12.1248 8.85722 12.1528 8.71064C12.1808 8.56407 12.2658 8.43461 12.3892 8.35075C12.5127 8.26688 12.6643 8.23548 12.8109 8.26345C13.7269 8.4414 14.5608 8.91056 15.1884 9.60103C15.8161 10.2915 16.2037 11.1663 16.2937 12.095C16.3006 12.1686 16.2929 12.2428 16.271 12.3133C16.2492 12.3839 16.2137 12.4495 16.1665 12.5064C16.1193 12.5632 16.0614 12.6102 15.996 12.6447C15.9307 12.6791 15.8592 12.7004 15.7856 12.7072H15.7331C15.5924 12.7078 15.4567 12.6557 15.3525 12.5611C15.2484 12.4665 15.1835 12.3363 15.1706 12.1963C15.1038 11.511 14.8174 10.8656 14.3543 10.3562C13.8911 9.8467 13.2758 9.50039 12.6 9.36877ZM23.0137 12.7297C22.9753 12.816 22.0415 14.886 19.9331 16.7722C19.8784 16.8235 19.814 16.8633 19.7437 16.8893C19.6734 16.9153 19.5986 16.927 19.5238 16.9237C19.4489 16.9204 19.3754 16.9022 19.3077 16.8701C19.2399 16.838 19.1793 16.7927 19.1293 16.7369C19.0793 16.681 19.041 16.6157 19.0166 16.5449C18.9922 16.474 18.9822 16.3989 18.9872 16.3242C18.9922 16.2494 19.0121 16.1763 19.0458 16.1093C19.0794 16.0424 19.1261 15.9828 19.1831 15.9341C20.2729 14.9549 21.1832 13.7927 21.8728 12.5C21.2808 11.3922 20.5269 10.3788 19.6359 9.49345C17.5106 7.38314 14.9419 6.31252 12 6.31252C11.3816 6.3117 10.7642 6.36187 10.154 6.46252C10.0806 6.47637 10.0051 6.47543 9.93199 6.45977C9.85889 6.4441 9.78965 6.41402 9.7283 6.37129C9.66696 6.32855 9.61476 6.27402 9.57473 6.21087C9.53471 6.14772 9.50768 6.07723 9.49522 6.00352C9.48276 5.9298 9.48512 5.85435 9.50215 5.78155C9.51919 5.70876 9.55057 5.64009 9.59445 5.57957C9.63834 5.51904 9.69385 5.46787 9.75774 5.42905C9.82162 5.39022 9.89261 5.36453 9.96655 5.35345C10.6386 5.24184 11.3187 5.18634 12 5.18752C16.0669 5.18752 18.8437 7.11314 20.46 8.72752C22.2019 10.4694 22.9819 12.1963 23.0137 12.2722C23.0458 12.3442 23.0623 12.4221 23.0623 12.501C23.0623 12.5798 23.0458 12.6577 23.0137 12.7297Z"
            fill="var(--text-dark)"
          />
        </svg>
      ) : null}
      
    </div>
    {inputError[formDataName] ? <div className="bg-[#F55942] px-[19px] py-[2px] mt-[5px] text-[var(--text-light)] rounded-[10px]"><span className="w-full sm:text-[16px] text-[13px]">{inputError[formDataName]}</span></div> : null}
    </div>
  );
}
